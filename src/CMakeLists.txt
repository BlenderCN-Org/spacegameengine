MACRO(
	ADD_SGE_INCLUDE_SOURCE_GROUP
	SOURCEPATH
)
	ADD_SGE_SOURCE_GROUP(
		"include\\\\\\\\sge" #cmake bitch
		${CMAKE_SOURCE_DIR}/include/sge
		"${SOURCEPATH}"
		*.hpp
		TEMPFILES
	)

	SET(SGECOREFILES ${SGECOREFILES} ${TEMPFILES})
ENDMACRO()

ADD_SGE_INCLUDE_SOURCE_GROUP("")
ADD_SGE_INCLUDE_SOURCE_GROUP(audio)
ADD_SGE_INCLUDE_SOURCE_GROUP(audio/sound)
ADD_SGE_INCLUDE_SOURCE_GROUP(collision)
ADD_SGE_INCLUDE_SOURCE_GROUP(collision/shapes)
ADD_SGE_INCLUDE_SOURCE_GROUP(config)
ADD_SGE_INCLUDE_SOURCE_GROUP(console)
ADD_SGE_INCLUDE_SOURCE_GROUP(error)
ADD_SGE_INCLUDE_SOURCE_GROUP(font)
ADD_SGE_INCLUDE_SOURCE_GROUP(image)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/algorithm)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/algorithm/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/color)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/color/any)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/color/any/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/view)
ADD_SGE_INCLUDE_SOURCE_GROUP(input)
ADD_SGE_INCLUDE_SOURCE_GROUP(input/modifier)
ADD_SGE_INCLUDE_SOURCE_GROUP(library)
ADD_SGE_INCLUDE_SOURCE_GROUP(log)
ADD_SGE_INCLUDE_SOURCE_GROUP(mainloop)
ADD_SGE_INCLUDE_SOURCE_GROUP(mainloop/asio)
ADD_SGE_INCLUDE_SOURCE_GROUP(model)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse/ini)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse/ini/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse/ini/output)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse/json)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse/json/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(parse/json/output)
ADD_SGE_INCLUDE_SOURCE_GROUP(plugin)
ADD_SGE_INCLUDE_SOURCE_GROUP(plugin/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/filter)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/glsl)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/glsl/uniform)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/glsl/uniform/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/index)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/index/dynamic)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/index/dynamic/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/state)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf/dynamic)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf/dynamic/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/animation)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/detail/roles)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/intrusive)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/intrusive/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/primitives)
ADD_SGE_INCLUDE_SOURCE_GROUP(sprite/roles)
ADD_SGE_INCLUDE_SOURCE_GROUP(systems)
ADD_SGE_INCLUDE_SOURCE_GROUP(texture)
ADD_SGE_INCLUDE_SOURCE_GROUP(texture/atlasing)
ADD_SGE_INCLUDE_SOURCE_GROUP(texture/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(time)
ADD_SGE_INCLUDE_SOURCE_GROUP(window)

MACRO(
	ADD_SGE_CORE_SOURCE_GROUP
	SOURCEPATH
)
	ADD_SGE_SOURCE_GROUP(
		src
		""
		"${SOURCEPATH}"
		*.?pp
		TEMPFILES	
	)

	SET(SGECOREFILES ${SGECOREFILES} ${TEMPFILES})
ENDMACRO()

ADD_SGE_CORE_SOURCE_GROUP("")
ADD_SGE_CORE_SOURCE_GROUP(audio)
ADD_SGE_CORE_SOURCE_GROUP(audio/sound)
ADD_SGE_CORE_SOURCE_GROUP(collision)
ADD_SGE_CORE_SOURCE_GROUP(collision/shapes)
ADD_SGE_CORE_SOURCE_GROUP(config)
ADD_SGE_CORE_SOURCE_GROUP(console)
ADD_SGE_CORE_SOURCE_GROUP(font)
ADD_SGE_CORE_SOURCE_GROUP(image)
ADD_SGE_CORE_SOURCE_GROUP(image/algorithm)
ADD_SGE_CORE_SOURCE_GROUP(image/color)
ADD_SGE_CORE_SOURCE_GROUP(image/color/any)
ADD_SGE_CORE_SOURCE_GROUP(image/view)
ADD_SGE_CORE_SOURCE_GROUP(input)
ADD_SGE_CORE_SOURCE_GROUP(input/modifier)
ADD_SGE_CORE_SOURCE_GROUP(library)
ADD_SGE_CORE_SOURCE_GROUP(log)
ADD_SGE_CORE_SOURCE_GROUP(mainloop)
ADD_SGE_CORE_SOURCE_GROUP(mainloop/asio)
ADD_SGE_CORE_SOURCE_GROUP(model)
ADD_SGE_CORE_SOURCE_GROUP(parse)
ADD_SGE_CORE_SOURCE_GROUP(parse/output)
ADD_SGE_CORE_SOURCE_GROUP(parse/ini)
ADD_SGE_CORE_SOURCE_GROUP(parse/ini/output)
ADD_SGE_CORE_SOURCE_GROUP(parse/json)
ADD_SGE_CORE_SOURCE_GROUP(parse/json/output)
ADD_SGE_CORE_SOURCE_GROUP(plugin)
ADD_SGE_CORE_SOURCE_GROUP(renderer)
ADD_SGE_CORE_SOURCE_GROUP(renderer/detail)
ADD_SGE_CORE_SOURCE_GROUP(renderer/filter)
ADD_SGE_CORE_SOURCE_GROUP(renderer/index)
ADD_SGE_CORE_SOURCE_GROUP(renderer/index/dynamic)
ADD_SGE_CORE_SOURCE_GROUP(renderer/glsl)
ADD_SGE_CORE_SOURCE_GROUP(renderer/glsl/uniform)
ADD_SGE_CORE_SOURCE_GROUP(renderer/state)
ADD_SGE_CORE_SOURCE_GROUP(renderer/vf/dynamic/)
ADD_SGE_CORE_SOURCE_GROUP(sprite)
ADD_SGE_CORE_SOURCE_GROUP(sprite/animation)
ADD_SGE_CORE_SOURCE_GROUP(sprite/detail)
ADD_SGE_CORE_SOURCE_GROUP(systems)
ADD_SGE_CORE_SOURCE_GROUP(texture)
ADD_SGE_CORE_SOURCE_GROUP(texture/atlasing)
ADD_SGE_CORE_SOURCE_GROUP(texture/detail)
ADD_SGE_CORE_SOURCE_GROUP(time)
ADD_SGE_CORE_SOURCE_GROUP(window)

IF (X11_FOUND)
	ADD_SGE_CORE_SOURCE_GROUP(x11)
ELSEIF (WIN32)
	ADD_SGE_INCLUDE_SOURCE_GROUP(windows)
	ADD_SGE_INCLUDE_SOURCE_GROUP(windows/detail)

	ADD_SGE_CORE_SOURCE_GROUP(windows)
	ADD_SGE_CORE_SOURCE_GROUP(windows/detail)
ENDIF ()

set_source_files_properties(
	config/plugin_path.cpp
	PROPERTIES
	COMPILE_FLAGS
	-DPLUGIN_PATH="\\\"${CMAKE_INSTALL_PREFIX}/lib/sge\\\""
)

set_source_files_properties(
	config/media_path.cpp
	PROPERTIES
	COMPILE_FLAGS
	-DMEDIA_PATH="\\\"${CMAKE_INSTALL_PREFIX}/share/games/sge/media\\\""
)

ADD_LIBRARY (sgecore SHARED ${SGECOREFILES})

TARGET_LINK_LIBRARIES (sgecore ${FCPPT_LIBRARIES})

IF (NOT MSVC)
	TARGET_LINK_LIBRARIES (
		sgecore
		${Boost_LIBRARIES}
	)
ENDIF ()

IF (UNIX)
	TARGET_LINK_LIBRARIES (sgecore ${X11_X11_LIB} dl)
ELSEIF (WIN32)
	TARGET_LINK_LIBRARIES (sgecore gdi32 kernel32 user32)
ENDIF ()

INSTALL (TARGETS sgecore DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

OPTION (ENABLE_GUI "Build the gui" ON)

IF (ENABLE_GUI)
	ADD_SUBDIRECTORY (gui)
ENDIF ()

ADD_SUBDIRECTORY (plugins)
