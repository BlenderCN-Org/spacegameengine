set(
	SGE_CORE_INCLUDE_FILES
	include/sge/class_symbol.hpp
	include/sge/error/check_state.hpp
	include/sge/exception.hpp
	include/sge/timer/basic.hpp
	include/sge/timer/basic_decl.hpp
	include/sge/timer/basic_fwd.hpp
	include/sge/timer/basic_impl.hpp
	include/sge/timer/clocks/adjustable.hpp
	include/sge/timer/clocks/adjustable_decl.hpp
	include/sge/timer/clocks/adjustable_fwd.hpp
	include/sge/timer/clocks/adjustable_impl.hpp
	include/sge/timer/clocks/delta.hpp
	include/sge/timer/clocks/delta_decl.hpp
	include/sge/timer/clocks/delta_fwd.hpp
	include/sge/timer/clocks/delta_impl.hpp
	include/sge/timer/clocks/detail/stateful_base.hpp
	include/sge/timer/clocks/detail/stateless_base.hpp
	include/sge/timer/clocks/detail/wrapper.hpp
	include/sge/timer/clocks/is_stateful.hpp
	include/sge/timer/clocks/standard.hpp
	include/sge/timer/detail/parameters_base_decl.hpp
	include/sge/timer/detail/parameters_base_impl.hpp
	include/sge/timer/elapsed.hpp
	include/sge/timer/elapsed_and_reset.hpp
	include/sge/timer/elapsed_fractional.hpp
	include/sge/timer/elapsed_fractional_and_reset.hpp
	include/sge/timer/enable_ctor_stateful.hpp
	include/sge/timer/enable_ctor_stateless.hpp
	include/sge/timer/frames_counter.hpp
	include/sge/timer/parameters.hpp
	include/sge/timer/parameters_decl.hpp
	include/sge/timer/parameters_fwd.hpp
	include/sge/timer/parameters_impl.hpp
	include/sge/timer/remaining.hpp
	include/sge/timer/remaining_fractional.hpp
	include/sge/timer/reset_when_expired.hpp
)

set(
	SGE_CORE_SRC_FILES
	src/exception.cpp
)

foreach(
	CUR_FILE
	${SGE_CORE_INCLUDE_FILES}
)
	get_filename_component(
		REL_PATH
		${CUR_FILE}
		PATH
	)

	string(
		REPLACE
		"include/"
		""
		TRIMMED_PATH
		"${REL_PATH}"
	)

	install(
		FILES
		${CMAKE_SOURCE_DIR}/${CUR_FILE}
		DESTINATION
		${INSTALL_INCLUDE_DIR}/${TRIMMED_PATH}
	)
endforeach()

install(
	DIRECTORY
	${CMAKE_SOURCE_DIR}/include/majutsu
	DESTINATION
	${INSTALL_INCLUDE_DIR}
)

install(
	FILES
	${CMAKE_BINARY_DIR}/include/sge/symbol.hpp
	DESTINATION
	${INSTALL_INCLUDE_DIR}/sge
)

# configure some resource paths
set(
	SGE_PLUGIN_BUILD_PATH
	"${LIBRARY_OUTPUT_PATH}/plugins"
)

set(
	SGE_PLUGIN_INSTALL_PATH
	"${PLUGIN_INSTALL_DIR}"
)

set(
	SGE_MEDIA_BUILD_PATH
	"${CMAKE_SOURCE_DIR}/media"
)

set(
	SGE_MEDIA_INSTALL_PATH
	"${MEDIA_INSTALL_DIR}"
)

include_directories(
	"${CMAKE_CURRENT_SOURCE_DIR}/include"
)

sge_generate_symbol_header(
	"sgecore"
	"SGE"
	"sge"
)


fcppt_utils_append_source_dir_and_make_groups(
	"${SGE_CORE_INCLUDE_FILES}"
	SGE_CORE_INCLUDE_FILES_ABS
)

fcppt_utils_append_source_dir_and_make_groups(
	"${SGE_CORE_SRC_FILES}"
	SGE_CORE_SRC_FILES_ABS
)

if(
	ENABLE_STATIC
)
	add_sge_core_lib(
		"STATIC"
	)
endif()

if(
	ENABLE_SHARED
)
	add_sge_core_lib(
		"SHARED"
	)
endif()

# core libraries
OPTION (ENABLE_AUDIO "Build the audio library" ON)
OPTION (ENABLE_CHARCONV "Build the charconv library" ON)
OPTION (ENABLE_FONT "Build the font library" ON)
OPTION (ENABLE_IMAGE "Build the image library" ON)
OPTION (ENABLE_IMAGE2D "Build the image2d library" ON)
OPTION (ENABLE_IMAGE3D "Build the image3d library" ON)
OPTION (ENABLE_INPUT "Build the input library" ON)
OPTION (ENABLE_LOG "Build the log base library" ON)
OPTION (ENABLE_MEDIA "Build the media base library" ON)
OPTION (ENABLE_MODELMD3 "Build the md3 model library" ON)
OPTION (ENABLE_MODELOBJ "Build the md3 model library" ON)
OPTION (ENABLE_PLUGIN "Build the plugin library" ON)
OPTION (ENABLE_RENDERER "Build the renderer library" ON)
OPTION (ENABLE_WINDOW "Build the window library" ON)

# more advanced libraries
find_package(
	Bullet
)

find_package(
	CEGUI
)

find_package(
	OpenCL
)

find_package(
	Cg
)

OPTION (ENABLE_CAMERA "Build the camera" ON)
OPTION (ENABLE_CEGUI "Build the cegui subsystem" ${CEGUI_FOUND})
OPTION (ENABLE_CG "Build the Cg library" ${CG_FOUND})
OPTION (ENABLE_CONFIG "Build the config library" ON)
OPTION (ENABLE_CONSOLE "Build the console" ON)
OPTION (ENABLE_FONTBITMAP "Build the bitmap font" ON)
OPTION (ENABLE_FONTTEXT "Build the font text library" ON)
OPTION (ENABLE_LINE_DRAWER "Build the line drawing library" ON)
OPTION (ENABLE_OPENCL "Build the opencl subsystem" ${OPENCL_FOUND})
OPTION (ENABLE_PARSE "Build the parse library" ON)
OPTION (ENABLE_PROJECTILE "Build the projectile subsystem" ${BULLET_FOUND})
OPTION (ENABLE_SHADER "Build the shader" ON)
OPTION (ENABLE_SPRITE "Build the sprite library" ON)
OPTION (ENABLE_SYSTEMS "Build the systems library" ON)
OPTION (ENABLE_TEXTURE "Build the texture helpers" ON)
OPTION (ENABLE_VIEWPORT "Build the viewport library" ON)


IF (ENABLE_AUDIO)
	ADD_SUBDIRECTORY(audio)
ENDIF ()

IF (ENABLE_CHARCONV)
	ADD_SUBDIRECTORY(charconv)
ENDIF ()

IF (ENABLE_FONT)
	ADD_SUBDIRECTORY(font)
ENDIF ()

IF (ENABLE_IMAGE)
	ADD_SUBDIRECTORY(image)
ENDIF ()

IF (ENABLE_IMAGE2D)
	ADD_SUBDIRECTORY(image2d)
ENDIF ()

IF (ENABLE_IMAGE3D)
	ADD_SUBDIRECTORY(image3d)
ENDIF ()

IF (ENABLE_INPUT)
	ADD_SUBDIRECTORY(input)
ENDIF ()

IF (ENABLE_LOG)
	ADD_SUBDIRECTORY(log)
ENDIF ()

IF (ENABLE_MEDIA)
	ADD_SUBDIRECTORY(media)
ENDIF ()

IF (ENABLE_MODELMD3)
	ADD_SUBDIRECTORY(model/md3)
ENDIF ()

IF (ENABLE_MODELOBJ)
	ADD_SUBDIRECTORY(model/obj)
ENDIF ()

IF (ENABLE_PLUGIN)
	ADD_SUBDIRECTORY(plugin)
ENDIF ()

IF (ENABLE_RENDERER)
	ADD_SUBDIRECTORY(renderer)
ENDIF ()

IF (ENABLE_WINDOW)
	ADD_SUBDIRECTORY(window)
ENDIF ()

#enable advanced libraries

IF (ENABLE_CEGUI)
	ADD_SUBDIRECTORY(cegui)
ENDIF ()

IF (ENABLE_CAMERA)
	ADD_SUBDIRECTORY(camera)
ENDIF ()

IF (ENABLE_CG)
	ADD_SUBDIRECTORY(cg)
ENDIF ()

IF (ENABLE_CONFIG)
	ADD_SUBDIRECTORY (config)
ENDIF ()

IF (ENABLE_CONSOLE)
	ADD_SUBDIRECTORY (console)
ENDIF ()

IF(ENABLE_FONTBITMAP)
	ADD_SUBDIRECTORY (font/bitmap)
ENDIF()

IF (ENABLE_FONTTEXT)
	ADD_SUBDIRECTORY (font/text)
ENDIF ()

IF (ENABLE_LINE_DRAWER)
	ADD_SUBDIRECTORY(line_drawer)
ENDIF ()

IF (ENABLE_OPENCL)
	ADD_SUBDIRECTORY (opencl)
ENDIF ()

IF (ENABLE_PARSE)
	ADD_SUBDIRECTORY (parse)
ENDIF ()

IF (ENABLE_PROJECTILE)
	ADD_SUBDIRECTORY (projectile)
ENDIF ()

IF (ENABLE_SHADER)
	ADD_SUBDIRECTORY(shader)
ENDIF ()

IF (ENABLE_SPRITE)
	ADD_SUBDIRECTORY(sprite)
ENDIF ()

IF (ENABLE_SYSTEMS)
	ADD_SUBDIRECTORY(systems)
ENDIF ()

IF (ENABLE_TEXTURE)
	ADD_SUBDIRECTORY(texture)
ENDIF ()

IF (ENABLE_VIEWPORT)
	ADD_SUBDIRECTORY(viewport)
ENDIF ()

add_subdirectory (plugins)
