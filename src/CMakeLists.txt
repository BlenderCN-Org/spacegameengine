MACRO(
	ADD_SGE_INCLUDE_SOURCE_GROUP
	SOURCEPATH
)
	ADD_SGE_SOURCE_GROUP(
		"include\\\\\\\\sge" #cmake bitch
		${CMAKE_SOURCE_DIR}/include/sge
		"${SOURCEPATH}"
		*.hpp
		TEMPFILES
	)

	SET(SGECOREFILES ${SGECOREFILES} ${TEMPFILES})
ENDMACRO()

ADD_SGE_INCLUDE_SOURCE_GROUP("")
ADD_SGE_INCLUDE_SOURCE_GROUP(audio)
ADD_SGE_INCLUDE_SOURCE_GROUP(audio/sound)
ADD_SGE_INCLUDE_SOURCE_GROUP(collision)
ADD_SGE_INCLUDE_SOURCE_GROUP(collision/shapes)
ADD_SGE_INCLUDE_SOURCE_GROUP(error)
ADD_SGE_INCLUDE_SOURCE_GROUP(font)
ADD_SGE_INCLUDE_SOURCE_GROUP(image)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/algorithm)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/algorithm/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/color)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/color/any)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/color/any/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(image/detail/view)
ADD_SGE_INCLUDE_SOURCE_GROUP(image2d/algorithm)
ADD_SGE_INCLUDE_SOURCE_GROUP(image2d/view)
ADD_SGE_INCLUDE_SOURCE_GROUP(image3d/algorithm)
ADD_SGE_INCLUDE_SOURCE_GROUP(image3d/view)
ADD_SGE_INCLUDE_SOURCE_GROUP(input)
ADD_SGE_INCLUDE_SOURCE_GROUP(input/cursor)
ADD_SGE_INCLUDE_SOURCE_GROUP(input/keyboard)
ADD_SGE_INCLUDE_SOURCE_GROUP(input/modifier)
ADD_SGE_INCLUDE_SOURCE_GROUP(input/mouse)
ADD_SGE_INCLUDE_SOURCE_GROUP(library)
ADD_SGE_INCLUDE_SOURCE_GROUP(log)
ADD_SGE_INCLUDE_SOURCE_GROUP(model)
ADD_SGE_INCLUDE_SOURCE_GROUP(plugin)
ADD_SGE_INCLUDE_SOURCE_GROUP(plugin/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/filter)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/glsl)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/glsl/uniform)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/glsl/uniform/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/index)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/index/dynamic)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/index/dynamic/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/state)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf/dynamic)
ADD_SGE_INCLUDE_SOURCE_GROUP(renderer/vf/dynamic/detail)
ADD_SGE_INCLUDE_SOURCE_GROUP(window)

MACRO(
	ADD_SGE_CORE_SOURCE_GROUP
	SOURCEPATH
)
	ADD_SGE_SOURCE_GROUP(
		src
		""
		"${SOURCEPATH}"
		*.?pp
		TEMPFILES	
	)

	SET(SGECOREFILES ${SGECOREFILES} ${TEMPFILES})
ENDMACRO()

ADD_SGE_CORE_SOURCE_GROUP("")
ADD_SGE_CORE_SOURCE_GROUP(audio)
ADD_SGE_CORE_SOURCE_GROUP(audio/sound)
ADD_SGE_CORE_SOURCE_GROUP(collision)
ADD_SGE_CORE_SOURCE_GROUP(collision/shapes)
ADD_SGE_CORE_SOURCE_GROUP(font)
ADD_SGE_CORE_SOURCE_GROUP(image)
ADD_SGE_CORE_SOURCE_GROUP(image/algorithm)
ADD_SGE_CORE_SOURCE_GROUP(image/color)
ADD_SGE_CORE_SOURCE_GROUP(image/color/any)
ADD_SGE_CORE_SOURCE_GROUP(image/view)
ADD_SGE_CORE_SOURCE_GROUP(image2d)
ADD_SGE_CORE_SOURCE_GROUP(image2d/algorithm)
ADD_SGE_CORE_SOURCE_GROUP(image2d/view)
ADD_SGE_CORE_SOURCE_GROUP(image3d/algorithm)
ADD_SGE_CORE_SOURCE_GROUP(image3d/view)
ADD_SGE_CORE_SOURCE_GROUP(input)
ADD_SGE_CORE_SOURCE_GROUP(input/cursor)
ADD_SGE_CORE_SOURCE_GROUP(input/keyboard)
ADD_SGE_CORE_SOURCE_GROUP(input/modifier)
ADD_SGE_CORE_SOURCE_GROUP(input/mouse)
ADD_SGE_CORE_SOURCE_GROUP(library)
ADD_SGE_CORE_SOURCE_GROUP(log)
ADD_SGE_CORE_SOURCE_GROUP(model)
ADD_SGE_CORE_SOURCE_GROUP(plugin)
ADD_SGE_CORE_SOURCE_GROUP(renderer)
ADD_SGE_CORE_SOURCE_GROUP(renderer/detail)
ADD_SGE_CORE_SOURCE_GROUP(renderer/filter)
ADD_SGE_CORE_SOURCE_GROUP(renderer/index)
ADD_SGE_CORE_SOURCE_GROUP(renderer/index/dynamic)
ADD_SGE_CORE_SOURCE_GROUP(renderer/glsl)
ADD_SGE_CORE_SOURCE_GROUP(renderer/glsl/uniform)
ADD_SGE_CORE_SOURCE_GROUP(renderer/state)
ADD_SGE_CORE_SOURCE_GROUP(renderer/vf/dynamic/)
ADD_SGE_CORE_SOURCE_GROUP(window)

IF(UNIX)
	SET(CMAKE_SHARED_LINKER_FLAGS -Wl,--no-undefined)
ENDIF()

# configure some resource paths
SET(SGE_PLUGIN_BUILD_PATH "${BINARY_PATH}/plugins")
SET(SGE_PLUGIN_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/lib/sge")
SET(SGE_MEDIA_BUILD_PATH "${CMAKE_SOURCE_DIR}/media")
SET(SGE_MEDIA_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/share/games/sge/media")

ADD_LIBRARY (sgecore SHARED ${SGECOREFILES})

TARGET_LINK_LIBRARIES (sgecore ${FCPPT_LIBRARIES} ${AWL_LIBRARY})

IF (NOT MSVC)
	TARGET_LINK_LIBRARIES (
		sgecore
		${Boost_SYSTEM_LIBRARY}
		${Boost_FILESYSTEM_LIBRARY}
	)
ENDIF ()

IF (UNIX)
	TARGET_LINK_LIBRARIES (sgecore dl pthread)
ELSEIF (WIN32)
	TARGET_LINK_LIBRARIES (sgecore gdi32 kernel32 user32)
ENDIF ()

INSTALL (TARGETS sgecore DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

OPTION (ENABLE_CAMERA "Build the camera" ON)
OPTION (ENABLE_CONFIG "Build the config library" ON)
OPTION (ENABLE_CONSOLE "Build the console" ON)
OPTION (ENABLE_FONTBITMAP "Build the bitmap font" ON)
OPTION (ENABLE_FONTTEXT "Build the font text library" ON)
OPTION (ENABLE_GUI "Build the gui" ON)
OPTION (ENABLE_ICONV "Build iconv" ON)
OPTION (ENABLE_PARSE "Build the parse library" ON)
OPTION (ENABLE_SHADER "Build the shader" ON)
OPTION (ENABLE_SPRITE "Build the sprite library" ON)
OPTION (ENABLE_SYSTEMS "Build the systems library" ON)
OPTION (ENABLE_TEXTURE "Build the texture helpers" ON)
OPTION (ENABLE_TIME "Build the time library" ON)

IF (ENABLE_CAMERA)
	ADD_SUBDIRECTORY(camera)
ENDIF ()

IF (ENABLE_CONFIG)
	ADD_SUBDIRECTORY (config)
ENDIF ()

IF (ENABLE_CONSOLE)
	ADD_SUBDIRECTORY (console)
ENDIF ()

IF(ENABLE_FONTBITMAP)
	ADD_SUBDIRECTORY (font/bitmap)
ENDIF()

IF (ENABLE_FONTTEXT)
	ADD_SUBDIRECTORY (font/text)
ENDIF ()

IF (ENABLE_GUI)
	ADD_SUBDIRECTORY (gui)
ENDIF ()

IF (ENABLE_ICONV)
	ADD_SUBDIRECTORY (iconv)
ENDIF ()

IF (ENABLE_PARSE)
	ADD_SUBDIRECTORY (parse)
ENDIF ()

IF (ENABLE_SHADER)
	ADD_SUBDIRECTORY(shader)
ENDIF ()

IF (ENABLE_SPRITE)
	ADD_SUBDIRECTORY(sprite)
ENDIF ()

IF (ENABLE_SYSTEMS)
	ADD_SUBDIRECTORY(systems)
ENDIF ()

IF (ENABLE_TEXTURE)
	ADD_SUBDIRECTORY(texture)
ENDIF ()

IF (ENABLE_TIME)
	ADD_SUBDIRECTORY(time)
ENDIF ()

ADD_SUBDIRECTORY (plugins)
